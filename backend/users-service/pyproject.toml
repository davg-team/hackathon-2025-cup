[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = []
maintainers = []
readme = "README.md"

[tool.poetry.dependencies]
python = "3.13"
fastapi = "^0.111.0"
uvicorn = { version = "^0.30.1", extras = ["standard"] }
gunicorn = "^22.0.0"
pydantic = "^2"
pydantic-settings = "^2"
ujson = "^5.10.0"
httptools = "^0.6.1"
loguru = "^0"
authlib = "^1.3.1"
pyjwt = { extras = ["crypto"], version = "^2.8.0" }
python-multipart = "^0.0.9"
requests = "^2.32.3"
python-jose = "^3.3.0"
jwcrypto = "^1.5.6"
uuid6 = "^2024.7.10"
ydb = { extras = ["yc"], version = "^3.18.8" }
pyyaml = "^6.0.2"
opentelemetry-sdk = "^1.28.2"
fastapi-decorators = "^1.0.6"
python-docx = "^1.1.2"
reportlab = "^4.2.5"


[tool.poetry.group.dev.dependencies]
pytest = "^8"
ruff = "^0.5.0"
pre-commit = "^3.7.1"
pytest-cov = "^5"
anyio = "^4"
rich = "^13.7.1"
pytest-env = "^1.1.3"

[tool.isort]
profile = "black"
multi_line_output = 3
src_paths = ["app"]


[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]
env = ["APP_ENVIRONMENT=pytest", "APP_DB_BASE=app_test", "APP_SENTRY_DSN="]

[tool.ruff]
# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
lint.select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
lint.ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "B008",    # Do not perform function calls in argument defaults
    "D211",    # No blank lines allowed before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "D202",    # No blank lines allowed after function docstring
    "ANN102",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for argument
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
]
exclude = [".venv/"]
lint.mccabe = { max-complexity = 10 }
line-length = 88

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str", "float", "bytes"]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
